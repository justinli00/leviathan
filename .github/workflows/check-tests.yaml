#check svn for head revision #; compare with working copy revision and run tests for all between
name: check-tests

on:
  #schedule:
    #- cron: '0 * * * *' #runs every hour on the dot
  repository_dispatch:
    types: check
  push: #TODO -- remove

permissions:
  contents: write

jobs:
  check-head:
    runs-on: [self-hosted]
    env:
      SVN_USERNAME: ${{ secrets.svn_username }}
      SVN_PASSWORD: ${{ secrets.svn_password }}
    steps:
    - name: checkout-git
      uses: actions/checkout@v3
      with:
        clean: false #important -- don't clean the directory

    - name: get-revisions
      run: |
        if ( Test-Path -Path svn-repo )
        {
          cd svn-repo
          "SVN_WORKING_REVISION=$(svn info --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --show-item revision)"  | Out-File -FilePath $env:GITHUB_ENV -Append
          "SVN_HEAD_REVISION=$(svn info --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --revision HEAD --show-item revision)" | Out-File -FilePath $env:GITHUB_ENV -Append
          cd ..
        }
    - name: check-revisions
      id: check-revisions
      if: ${{ env.SVN_WORKING_REVISION }} != ${{ env.SVN_HEAD_REVISION }}
      run: |
        Write-Host "Checking updates in the range of [$env:SVN_WORKING_REVISION, $env:SVN_HEAD_REVISION]."
        cd svn-repo
        $revisions_to_test = @()
        $head = [int]$env:SVN_HEAD_REVISION   
        for (($i = [int]$env:SVN_WORKING_REVISION); $i -le $head; $i++)
        {
          #get the change log for revision i and remove all dashes
          $revision_changes = (svn --username $env:SVN_USERNAME --password $env:SVN_PASSWORD log -v -r $i)
          $change_count = ($revision_changes.Split("`n").Count - 1)
          if ( $change_count )
          {
            Write-Host "Revision $i contains the following changes to 375_PROJECT : "
            Write-Host "Adding to list of revisions to test."
            $revisions_to_test += ,$i
          }
          else
          {
            Write-Host "Revision $i did not change 375_PROJECT."
          }
        }
        cd ..

        #writing to GITHUB_OUTPUT, not GITHUB_ENV!
        $revisions_to_test = ($revisions_to_test | ConvertTo-Json -Compress)
        Write-Host "Revisions to test: $revisions_to_test"
        "test_array=$revisions_to_test" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
      shell: powershell
    outputs:
      revisions_to_test: ${{ steps.check-revisions.outputs.test_array }}

  #tests needed and found
  run-tests:
    if: "${{ needs.check-head.outputs.revisions_to_test != '' }}"
    needs: check-head
    strategy:
      max-parallel: 1
      matrix:
        revision: ${{ fromJson(needs.check-head.outputs.revisions_to_test) }}
    uses: justinli00/leviathan/.github/workflows/run-tests.yaml@main
    with:
      revision: ${{ matrix.revision }}
    secrets: inherit
    permissions: 
      contents: write

  #just run pull-svn if no revisions are needed; no input --> update to HEAD
  update-to-head:
    needs: check-head
    if: "${{ needs.check-head.outputs.revisions_to_test == '' }}"
    uses: justinli00/leviathan/.github/workflows/pull-svn.yaml@main 
    secrets: inherit
    permissions: 
      contents: write