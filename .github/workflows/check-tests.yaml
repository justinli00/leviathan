#check svn for head revision #; compare with working copy revision and run tests for all between
name: check-tests

on:
  #schedule:
  #  - cron: '0 * * * *' #runs every hour on the dot
  repository_dispatch:
    types: check

permissions:
  contents: write

concurrency: leviathan-runner

jobs:
  check-head:
    runs-on: [self-hosted]
    env:
      SVN_USERNAME: ${{ secrets.svn_username }}
      SVN_PASSWORD: ${{ secrets.svn_password }}
      START_REVISION: ${{ github.event.client_payload.start-revision }} 
      END_REVISION: ${{ github.event.client_payload.end-revision }}
      TESTING_REVISION: ${{ github.event.client_payload.test-revision }}
    steps:
    #DO NOT CHECKOUT GIT
    - name: get-revisions
      id: get-revisions
      env: 
        MIN_TEST: ${{ vars.min_test }}
      run: |
        #assume that svn-repo exists -- we have bigger problems if not
        cd svn-repo 

        #clamp inputted values if necessary
        $head = (svn info --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --revision HEAD --show-item revision)
        if ("$env:END_REVISION" -eq "" -or [int]$head -lt [int]$env:END_REVISION)
        {
          Write-Host ">> Setting to END_REVISION to $head."
          $end_revision=(svn info --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --revision HEAD --show-item revision)
          "END_REVISION=$(svn info --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --revision HEAD --show-item revision)" | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        if ("$env:START_REVISION" -eq "" -or [int]$env:MIN_TEST -gt [int]$env:START_REVISION ) #hard-coded... but whatever
        {
          Write-Host ">> Setting to START_REVISION to current revision."
          "START_REVISION=$(svn info --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --show-item revision)"  | Out-File -FilePath $env:GITHUB_ENV -Append
        }
        cd ..

        #same for testing revision
        $testing_revision = $env:TESTING_REVISION
        if ( [int]$testing_revision -gt [int]$head -or [int]$testing_revision -lt [int]$env:MIN_TEST )
        {
          Write-Host ">> TESTING_REVISION is invalid ($env:TESTING_REVISION). Setting to empty string."
          $testing_revision = ""
        }

        Write-Host ">> testing_revision: $testing_revision" 
        "output1='$testing_revision'" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
        "output2=$end_revision" | Out-File -FilePath $env:GITHUB_OUTPUT -Append

    - name: check-revisions
      id: check-revisions
      if: ${{ env.START_REVISION != env.END_REVISION }}
      run: |
        Write-Host ">> Checking updates in the range of [$env:START_REVISION, $env:END_REVISION]."
        cd svn-repo
        $revisions_to_test = @()
        $end = [int]$env:END_REVISION   
        for (($i = [int]$env:START_REVISION); $i -le $end; $i++)
        {
          #get the change log for revision i and remove all dashes
          $revision_changes = (svn --username $env:SVN_USERNAME --password $env:SVN_PASSWORD log -v -r $i)
          $change_count = ($revision_changes.Split("`n").Count - 1)
          if ( $change_count )
          {
            Write-Host ">> Revision $i contains changes 375_PROJECT."
            Write-Host ">> Adding to list of revisions to test."
            $revisions_to_test += ,$i
          }
          else
          {
            Write-Host ">> Revision $i did not change 375_PROJECT."
          }

          if( $revisions_to_test.Length -ge ${{ vars.max_queued_tests }})
          {
            Write-Host ">> Queued tests has reached limit of ${{ vars.max_queued_tests }}."
            break
          }
        }
        cd ..

        if ( $revisions_to_test.Length -eq 1 )
        {
          #special case; manually serialize
          $revisions_to_test = '[' + $revisions_to_test + ']'
        }
        else
        {
          $revisions_to_test = ($revisions_to_test | ConvertTo-Json -Compress)
        }

        #writing to GITHUB_OUTPUT, not GITHUB_ENV!
        Write-Host "`n>> -----------------------------------`n`n>> Revisions to test: $revisions_to_test"
        "output1=$revisions_to_test" | Out-File -FilePath $env:GITHUB_OUTPUT -Append
    outputs:
      testing-revision: ${{ steps.get-revisions.outputs.output1 }}
      end-revision: ${{ steps.get-revisions.outputs.output2 }}
      revisions-to-test: ${{ steps.check-revisions.outputs.output1 }}

  #tests needed and found
  test-revisions:
    if: "${{ needs.check-head.outputs.revisions-to-test != '' }}"
    needs: check-head
    strategy:
      max-parallel: 1
      matrix:
        revision: ${{ fromJson(needs.check-head.outputs.revisions-to-test) }}
    uses: justinli00/leviathan/.github/workflows/run-tests.yaml@main
    with:
      revision: ${{ matrix.revision }}
      test-revision: ${{ needs.check-head.outputs.testing-revision }} 
    secrets: inherit
    permissions: 
      contents: write

  #update svn-repo to head revision, regardless of whether tests were run or not
  update-to-head:
    needs: [check-head, test-revisions]
    if: always()
    uses: justinli00/leviathan/.github/workflows/pull-svn.yaml@main 
    with:
      revision: ${{ needs.check-head.outputs.end-revision }}
      test-revision: ${{ needs.check-head.outputs.end-revision }}
    secrets: inherit
    permissions: 
      contents: write