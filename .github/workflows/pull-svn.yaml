#updates git repo's versions of svn repo files
name: Pull SVN
run-name: Pull from SVN 

on:
  repository_dispatch:
    types: pull-svn
  workflow_call:
    inputs:
      revision:
        required: true
        type: string
      test-revision:
        required: true
        type: number
permissions:
  contents: write

#TODO -- watch for failure and run cleanup 

jobs:
  pull-svn-files:
    env:
      SVN_USERNAME: ${{ secrets.svn_username }}
      SVN_PASSWORD: ${{ secrets.svn_password }}
      SVN_URL: ${{ secrets.svn_url }}
      TARGET_REVISION: "_"
    runs-on: self-hosted
    steps:
    #DO NOT CHECKOUT GIT
    #determine which variable to use
    - name: set-revision
      env: 
        MIN_TEST: ${{ vars.min_test }}
      run: |
        $head=(svn info --username $env:SVN_USERNAME --password $env:SVN_PASSWORD $env:SVN_URL --revision HEAD --show-item revision)
        #which revision to update to
        if ( "${{ inputs.revision }}" -eq "" )
        {
          #no input specified; get the head revision
          $target=$head
        }
        else
        {
          #revision specified from workflow call; pass input along
          $target=${{ inputs.revision }}
        }
        "TARGET_REVISION=$target"| Out-File -FilePath $env:GITHUB_ENV -Append

        #which revision to update the test-revision to
        Write-Host ">> inputs.test-revision: ${{ inputs.test-revision }}"
        if ( "${{ inputs.test-revision }}" -eq "" -or [int]${{ inputs.test-revision }} -gt [int]$head -or [int]${{ inputs.test-revision }} -lt [int]$env:MIN_TEST )
        {
          #invalid test-revision
          Write-Host ">> Inputted testing folder revision was either empty or invalid. Updating to $target."
          $test_target=$target
        }
        else
        {
          #testing folder revision specified from workflow call; pass input along
          $test_target=${{ inputs.test-revision }}
        }
        "TEST_SCRIPT_REVISION=$test_target" | Out-File -FilePath $env:GITHUB_ENV -Append

    - name: checkout-update-svn
      env:
        SVN_URL: ${{ secrets.svn_url }}
        TESTING_PATH: ${{ vars.testing_path }}
      run: |
        if ( !(Test-Path -Path svn-repo ) )
        { 
          Write-Host ">> svn-repo was not found. Checking out new copy."
          New-Item -Path ".\svn-repo" -ItemType "Directory"    
          svn checkout --username $env:SVN_USERNAME --password $env:SVN_PASSWORD $env:SVN_URL --revision $env:TARGET_REVISION svn-repo 
          cd svn-repo
        } 
        else 
        {
          Write-Host ">> svn-repo was found. Updating to head revision, if necessary."
          cd svn-repo
          svn update --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --revision $env:TARGET_REVISION
          Write-Host ">> Update successful. Resolving any conflicts."
          svn resolve --accept theirs-full --username $env:SVN_USERNAME --password $env:SVN_PASSWORD 
          Write-Host ">> All conflicts should be resolved. Printing status of all items:"
          svn status --username $env:SVN_USERNAME --password $env:SVN_PASSWORD
        }
        Write-Host ">> runner's copy of svn files is now up-to-date."

        if ($env:TEST_SCRIPT_REVISION -ne $env:TARGET_REVISION)
        {
          Write-Host ">> Updating testing folder to $env:TEST_SCRIPT_REVISION."
          cd TESTING_PATH
          svn update --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --revision $env:TEST_SCRIPT_REVISION
          Write-Host ">> Update successful. Resolving any conflicts."
          svn resolve --accept theirs-full --username $env:SVN_USERNAME --password $env:SVN_PASSWORD 
          cd ..\..\..
        }
        cd .. 