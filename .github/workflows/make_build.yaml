#makes a release with unity
name: Make Build

on:
  schedule:
    - cron: '59 6 * * 2' #runs at 11:59 on Monday (PDT -> UTC)
  repository_dispatch:
    types: build
permissions:
  contents: write

jobs:
  #pull-svn:
  #  uses: ./.github/workflows/pull_svn.yaml
  #  secrets: inherit
  #  permissions: 
  #    contents: write
  build:
    runs-on: windows-2019 
    env:
      BUILD_NAME: Basil and the Isles of Spice
      TARGET_PLATFORM: StandaloneWindows64
    steps:
    - uses: actions/checkout@v3
    
    - name: checkout-svn
      run: |
        New-Item -Path ".\svn-repo" -ItemType "Directory"
        svn checkout --username $env:SVN_USERNAME --password $env:SVN_PASSWORD $env:SVN_URL svn-repo
        cd svn-repo
        "BUILD_NAME=${{ env.BUILD_NAME }} r$(svn info --username $env:SVN_USERNAME --password $env:SVN_PASSWORD --revision HEAD --show-item revision)" | Out-File -FilePath $env:GITHUB_ENV -Append
        cd ..
      env:
        SVN_USERNAME: ${{ secrets.SVN_USERNAME }}
        SVN_PASSWORD: ${{ secrets.SVN_PASSWORD }}
        SVN_URL: ${{ secrets.SVN_URL }}
      shell: pwsh

    #TODO -- caching --> https://game.ci/docs/github/builder/#caching
    #how can we version the library while keeping it unversioned in svn?
    #so now yeah caching is a thing again, since we're no longer storing the entire repo

    - name: make-build
      #run: '"${{ env.BUILD_NAME }}" | Out-File -FilePath "test file"'
      uses: game-ci/unity-builder@v2
      env:
        UNITY_EMAIL: ${{ secrets.UNITY_EMAIL }}
        UNITY_PASSWORD: ${{ secrets.UNITY_PASSWORD }}
        UNITY_SERIAL: ${{ secrets.UNITY_SERIAL }}
      with:
        targetPlatform: ${{ env.TARGET_PLATFORM }}
        unityVersion: 2021.3.1f1 
        projectPath: svn-repo
        allowDirtyBuild: true       

    - name: upload-artifact
      uses: actions/upload-artifact@v3
      with:
        name: ${{ env.BUILD_NAME }}
        path: build/${{ env.TARGET_PLATFORM }}

    #push changes to github
    #- name: push-build
    #  run: |
    #    git config user.name 'Automated Build'
    #    git config user.email ${{ secrets.UNITY_EMAIL }}
    #    git add build
    #    git commit -m 'Automated Build | ${{ env.BUILD_NAME }}'
    #    git push